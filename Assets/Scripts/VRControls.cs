//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/VRControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/VRControls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @VRControls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @VRControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VRControls"",
    ""maps"": [
        {
            ""name"": ""OculusTouchControllers"",
            ""id"": ""2fba5a16-45d1-4043-9557-6c04e7ea9f53"",
            ""actions"": [
                {
                    ""name"": ""AButton"",
                    ""type"": ""Button"",
                    ""id"": ""06cbca17-ba1c-42eb-9ee3-11969e6d8a48"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""40c8e5f9-bf25-4118-a880-be223ac7b09d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftTrigger"",
                    ""type"": ""Value"",
                    ""id"": ""7c6dd3a4-1f88-4556-8022-573a514be659"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightJoyStick"",
                    ""type"": ""Value"",
                    ""id"": ""d1773e3c-bbf3-4594-9ba7-2e10528a7eca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7dfcdc4-7a57-4ca2-bcd8-379e21662b83"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94a44e48-8551-43f8-9000-27582ea6ff11"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d73f9ed-9f2d-43f8-ac85-03dccf467177"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTrigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5cf5c22-b65c-4f38-bc43-a22e934d2729"",
                    ""path"": ""<OculusTouchController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightJoyStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OculusTouchControllers
        m_OculusTouchControllers = asset.FindActionMap("OculusTouchControllers", throwIfNotFound: true);
        m_OculusTouchControllers_AButton = m_OculusTouchControllers.FindAction("AButton", throwIfNotFound: true);
        m_OculusTouchControllers_RightTrigger = m_OculusTouchControllers.FindAction("RightTrigger", throwIfNotFound: true);
        m_OculusTouchControllers_LeftTrigger = m_OculusTouchControllers.FindAction("LeftTrigger", throwIfNotFound: true);
        m_OculusTouchControllers_RightJoyStick = m_OculusTouchControllers.FindAction("RightJoyStick", throwIfNotFound: true);
    }

    ~@VRControls()
    {
        UnityEngine.Debug.Assert(!m_OculusTouchControllers.enabled, "This will cause a leak and performance issues, VRControls.OculusTouchControllers.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OculusTouchControllers
    private readonly InputActionMap m_OculusTouchControllers;
    private List<IOculusTouchControllersActions> m_OculusTouchControllersActionsCallbackInterfaces = new List<IOculusTouchControllersActions>();
    private readonly InputAction m_OculusTouchControllers_AButton;
    private readonly InputAction m_OculusTouchControllers_RightTrigger;
    private readonly InputAction m_OculusTouchControllers_LeftTrigger;
    private readonly InputAction m_OculusTouchControllers_RightJoyStick;
    /// <summary>
    /// Provides access to input actions defined in input action map "OculusTouchControllers".
    /// </summary>
    public struct OculusTouchControllersActions
    {
        private @VRControls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public OculusTouchControllersActions(@VRControls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "OculusTouchControllers/AButton".
        /// </summary>
        public InputAction @AButton => m_Wrapper.m_OculusTouchControllers_AButton;
        /// <summary>
        /// Provides access to the underlying input action "OculusTouchControllers/RightTrigger".
        /// </summary>
        public InputAction @RightTrigger => m_Wrapper.m_OculusTouchControllers_RightTrigger;
        /// <summary>
        /// Provides access to the underlying input action "OculusTouchControllers/LeftTrigger".
        /// </summary>
        public InputAction @LeftTrigger => m_Wrapper.m_OculusTouchControllers_LeftTrigger;
        /// <summary>
        /// Provides access to the underlying input action "OculusTouchControllers/RightJoyStick".
        /// </summary>
        public InputAction @RightJoyStick => m_Wrapper.m_OculusTouchControllers_RightJoyStick;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_OculusTouchControllers; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="OculusTouchControllersActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(OculusTouchControllersActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="OculusTouchControllersActions" />
        public void AddCallbacks(IOculusTouchControllersActions instance)
        {
            if (instance == null || m_Wrapper.m_OculusTouchControllersActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OculusTouchControllersActionsCallbackInterfaces.Add(instance);
            @AButton.started += instance.OnAButton;
            @AButton.performed += instance.OnAButton;
            @AButton.canceled += instance.OnAButton;
            @RightTrigger.started += instance.OnRightTrigger;
            @RightTrigger.performed += instance.OnRightTrigger;
            @RightTrigger.canceled += instance.OnRightTrigger;
            @LeftTrigger.started += instance.OnLeftTrigger;
            @LeftTrigger.performed += instance.OnLeftTrigger;
            @LeftTrigger.canceled += instance.OnLeftTrigger;
            @RightJoyStick.started += instance.OnRightJoyStick;
            @RightJoyStick.performed += instance.OnRightJoyStick;
            @RightJoyStick.canceled += instance.OnRightJoyStick;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="OculusTouchControllersActions" />
        private void UnregisterCallbacks(IOculusTouchControllersActions instance)
        {
            @AButton.started -= instance.OnAButton;
            @AButton.performed -= instance.OnAButton;
            @AButton.canceled -= instance.OnAButton;
            @RightTrigger.started -= instance.OnRightTrigger;
            @RightTrigger.performed -= instance.OnRightTrigger;
            @RightTrigger.canceled -= instance.OnRightTrigger;
            @LeftTrigger.started -= instance.OnLeftTrigger;
            @LeftTrigger.performed -= instance.OnLeftTrigger;
            @LeftTrigger.canceled -= instance.OnLeftTrigger;
            @RightJoyStick.started -= instance.OnRightJoyStick;
            @RightJoyStick.performed -= instance.OnRightJoyStick;
            @RightJoyStick.canceled -= instance.OnRightJoyStick;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="OculusTouchControllersActions.UnregisterCallbacks(IOculusTouchControllersActions)" />.
        /// </summary>
        /// <seealso cref="OculusTouchControllersActions.UnregisterCallbacks(IOculusTouchControllersActions)" />
        public void RemoveCallbacks(IOculusTouchControllersActions instance)
        {
            if (m_Wrapper.m_OculusTouchControllersActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="OculusTouchControllersActions.AddCallbacks(IOculusTouchControllersActions)" />
        /// <seealso cref="OculusTouchControllersActions.RemoveCallbacks(IOculusTouchControllersActions)" />
        /// <seealso cref="OculusTouchControllersActions.UnregisterCallbacks(IOculusTouchControllersActions)" />
        public void SetCallbacks(IOculusTouchControllersActions instance)
        {
            foreach (var item in m_Wrapper.m_OculusTouchControllersActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OculusTouchControllersActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="OculusTouchControllersActions" /> instance referencing this action map.
    /// </summary>
    public OculusTouchControllersActions @OculusTouchControllers => new OculusTouchControllersActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "OculusTouchControllers" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="OculusTouchControllersActions.AddCallbacks(IOculusTouchControllersActions)" />
    /// <seealso cref="OculusTouchControllersActions.RemoveCallbacks(IOculusTouchControllersActions)" />
    public interface IOculusTouchControllersActions
    {
        /// <summary>
        /// Method invoked when associated input action "AButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightTrigger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightTrigger(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftTrigger" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftTrigger(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RightJoyStick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightJoyStick(InputAction.CallbackContext context);
    }
}
